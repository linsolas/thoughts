<?xml version="1.0" encoding="ISO-8859-1"?>
<document>
	<entete>
		<rubrique>4</rubrique>
		<meta>
			<description>Test d'IntelliJ IDEA v13</description>
			<keywords>intellij, idea, java, ide</keywords>
		</meta>
		<titre>
			<page>Test d'IntelliJ IDEA v13</page>
			<article>Test d'IntelliJ IDEA v13</article>
		</titre>
		<date>2014-01-05</date>
		<miseajour/>
		<extratag/>
		<google-analytics>UA-28115938-1</google-analytics>
		<licauteur>romaintaz</licauteur>
		<lictype>2</lictype>
		<licannee>2014</licannee>
		<serveur>linsolas.developpez.com</serveur>
		<chemin>articles/java/outils/intellij-idea-13</chemin>
		<urlhttp>http://linsolas.developpez.com/articles/java/outils/intellij-idea-13/</urlhttp>
		<pdf>
			<sautDePageAvantSection>0</sautDePageAvantSection>
			<notesBasPage>FinDocument</notesBasPage>
		</pdf>
	</entete>
	<lecteur>
		<niveau type="1"/>
		<duree>30m</duree>
	</lecteur>
	<authorDescriptions>
		<authorDescription name="romaintaz" role="auteur">
			<fullname>Romain Linsolas</fullname>
		</authorDescription>
	</authorDescriptions>
	<synopsis>
		<paragraph>Cet article a pour but de montrer les nouveautés
            apportées par la 13e version d'IntelliJ IDEA de JetBrains, et de
            présenter quelques unes de ses forces en tant qu'outil de
            développement.
        </paragraph>
	</synopsis>
	<soustitre>
		<b>Test de la version 13 de l'EDI IntelliJ IDEA</b>
	</soustitre>
	<summary>
		<section id="I">
			<title>Qu'est-ce qu'IntelliJ</title>
			<paragraph>Faisons en premier lieu un rapide tour de l'outil.
            </paragraph>
			<section id="I-A">
				<title>Introduction</title>
				<paragraph>
                    Depuis janvier 2001, la société
                    <link href="http://www.jetbrains.com/" title="Site de JetBrains">JetBrains
                    </link>
                    édite le logiciel
                    <link href="http://www.jetbrains.com/idea/" title="Site d'IntelliJ IDEA">IntelliJ
                        IDEA
                    </link>
                    . Il s'agit d'un
                    <b>EDI</b>
                    (ou
                    <b>IDE</b>
                    en anglais), à savoir un
                    <i>Environnement de Développement Intégré</i>
                    (
                    <i>Integrated Development Environment</i>
                    ), autrement dit un ensemble d'outils déstiné au développement
                    logiciel. IDEA est ainsi à mettre au même niveau - toutes
                    proportions gardées - d'
                    <link href="http://www.eclipse.org/" title="Site d'Eclipse">Eclipse
                    </link>
                    ou encore de
                    <link href="http://www.netbeans.org/" title="Site de NetBeans">NetBeans
                    </link>
                    .
                </paragraph>
				<paragraph>
                    Pour information,
                    <b>IntelliJ</b>
                    fait référence à la plateforme commune de JetBrains pour tous leurs
                    outils de développement,
                    <b>IDEA</b>
                    étant l'EDI de développement Java. Il est donc plus juste de dire
                    "je travaille sur IDEA" que "je travaille sur IntelliJ", bien que
                    ce soit souvent la seconde phrase qui soit la plus courante.
                </paragraph>
			</section>
			<section id="I-B">
				<title>Versions et prix</title>
				<paragraph>
                    IDEA existe en deux versions :
                    <b>Community</b>
                    et
                    <b>Ultimate.</b>
                    Pour faire simple, la version
                    <b>Community</b>
                    , gratuite, est avant tout destinée au développement d'applications
                    "lourdes" Java, Scala et Android. Dès qu'il s'agit de développer
                    des applications web, il faut se tourner vers l'édition
                    <b>Ultimate</b>
                    . Son prix, pour une licence personnelle, est de 179€ (hors promotion ou prix de mise à jour).
                </paragraph>
				<paragraph>Un comparatif complet des deux éditions est visible<link href="http://www.jetbrains.com/idea/features/editions_comparison_matrix.html" title="Comparaison des versions d'IDEA">ici</link>.
                </paragraph>
				<paragraph>Vous pouvez télécharger l'une des deux versions sur la<link href="http://www.jetbrains.com/idea/download/" title="Page de téléchargement">page dédiée</link>
                    . Notez au passage qu'IntelliJ IDEA est compatible Windows, Mac et Linux.
                </paragraph>
			</section>
			<section id="I-C">
				<title>Principales fonctionnalités</title>
				<paragraph>Je ne vais pas détailler ici toutes les fonctionnalités d'IDEA, il me faudrait un livre
                    entier pour cela. Je passe toutefois en revue les principales fonctionnalités et langages,
                    frameworks ou outils supportés.
                </paragraph>
				<section id="I-C-1">
					<title>Langages et framework supportés</title>
					<paragraph>La version
                        <b>Community</b>
                        gère nativement les langages suivants : Java, Scala, Groovy, Clojure et XML, XSD et DTD. Avec la
                        version
                        <b>Ultimate</b>
                        s'ajoutent les langages dédiés au développement web, à savoir le HTML, CSS, JavaScript,
                        CoffeeScript, ActionScript. Viennent également le support du Freemarker, de Velocity, du XSL,
                        XPath, SQL, Ruby et JRuby, Python ou encore PHP.
                    </paragraph>
					<paragraph>Certains de ces langages nécessitent toutefois l'ajout de plugins gratuits.</paragraph>
					<paragraph>Avec la version
                        <b>Ultimate</b>
                        vient également le support des frameworks les plus courants pour le développement autour de
                        l'écosystème de la JVM ou du web. On citera par exemple Spring, Play! framework, JavaEE 6, GWT,
                        Hibernate, Struts, Grails, Griffon, Sass, LESS, Rails, Django, Node.js, etc.
                    </paragraph>
				</section>
				<section id="I-C-2">
					<title>Gestionnaires de sources</title>
					<paragraph>Si vous travaillez sur CVS (désolé pour vous), SVN, Mercurial ou Git (ou GitHub), alors
                        la version
                        <b>Community</b>
                        sera suffisante pour vous. Si vous avez Team Foundation Server, Perforce, ClearCase ou encore
                        Visual SourceSafe, c'est vers la version
                        <b>Ultimate</b>
                        qu'il vous faudra vous tourner.
                    </paragraph>
				</section>
				<section id="I-C-3">
					<title>Outils de construction</title>
					<paragraph>Les principaux outils de construction d'applications sont présents dans les deux éditions
                        d'IDEA. On y retrouve ainsi Maven, Grandle, Ant et Gant Build Tools.
                    </paragraph>
				</section>
				<section id="I-C-4">
					<title>Développement et autres fonctions</title>
					<paragraph>Pour ce qui concerne le développement à proprement parler, IDEA offre une excellente
                        intégration des outils de tests (JUnit, TestNG, Spock ou encore Cucumber), un historique local
                        des modifications de fichiers, une intéropérabilité avec Eclipse, ou encore un gestionnaire de
                        contexte. Ce dernier permet de travailler sur un ticket JIRA (ou n'importe quel autre
                        gestionnaire de tickets) et d'y associer un contexte. Ainsi, lorsque l'on rouvre un ticket JIRA
                        sur lequel on avait déjà commencé à travailler, IDEA va rouvrir les fichiers qui étaient ouverts
                        lorsque le contexte de ce ticket avait été précédemment fermé. Si vous êtes adeptes de
                        <link href="http://www.eclipse.org/mylyn/" title="Mylin sur Eclipse">Mylyn</link><link href="http://www.eclipse.org/mylyn/" title="Mylin sur Eclipse">sur Eclipse</link>, cette
                        fonction devrait vous intéresser. Vous pouvez voir
                        <link href="http://www.jetbrains.com/idea/features/tasks_and_context.html" title="Tâches et contextes d'IDEA">ici
                        </link>
                        pour plus de détails (en anglais).
                    </paragraph>
					<paragraph>A ce propos, IDEA s'interface sans problème avec les plus populaires des systèmes de
                        tickets : JIRA, YouTrack, Lighthouse, GitHub, Redmine, Trac, etc.
                    </paragraph>
					<paragraph>Si vous possédez la version<b>Ultimate</b>, vous disposerez également d'un gestionnaire
                        complet de base de données (éditeur SQL, définition de schémas, diagrammes, etc.), d'un
                        designeur UML, d'outils de couverture de code, du "Structural Search and Replace" (voir le
                        chapitre dédié plus loin).
                    </paragraph>
					<image align="center" alt="[ALT-PASTOUCHE]Il est possible de générer le diagramme des tables grâce à IDEA[TITRE-PASTOUCHE]Il est possible de générer le diagramme des tables grâce à IDEA" legende="Il est possible de générer le diagramme des tables grâce à IDEA" src="./images/database_uml.png"/>
					<paragraph>L'intégralité des fonctionnalités d'IDEA est à trouver sur<link href="http://www.jetbrains.com/idea/features/index.html" title="Fonctionnalités d'IDEA">
                        cette page</link>.
                    </paragraph>
				</section>
			</section>
		</section>
		<section id="II">
			<title>Les nouveautés de la version 13</title>
			<paragraph>Comme à chaque fin d'année, JetBrains publie sa nouvelle version majeure de son EDI. 2013
                n'échappe pas à la règle, et a vu la version 13 de l'outil sortir. Quelles sont les principales
                nouveautés de cette version ? C'est ce que nous allons voir.
            </paragraph>
			<section id="II-A">
				<title>Android Studio</title>
				<paragraph>Les développeurs d'applications mobiles pour Android vont être contents. Annoncé lors du<link href="https://developers.google.com/events/io/" title="Annonce de l'Android Studio">Google I/O
                    de 2013</link>, IDEA est désormais l'EDI standard pour le développement d'applications mobiles pour
                    l'OS de Google.
                </paragraph>
				<image align="center" alt="[ALT-PASTOUCHE]L'Android Studio[TITRE-PASTOUCHE]L'Android Studio" legende="L'Android Studio" src="./images/android_multiple_devices_preview.png"/>
				<paragraph>Cet Android Studio se compose de différents éléments :</paragraph>
				<liste>
					<element>Éditeur visuel pour la partie graphique des applications.</element>
					<element>Émulateur d'appareils Android.</element>
					<element>Meilleure intégration de<link href="http://www.gradle.org/" title="Gradle">Gradle</link>,
                        l'outil de construction des applications Android.
                    </element>
					<element>Éditeur XML dédié à Android.</element>
					<element>Outil d'inspection Lint, pour analyser la qualité du code.</element>
				</liste>
				<paragraph>Autre bonne nouvelle, l'Android Studio est proposé dès la version<b>Community</b>.
                </paragraph>
			</section>
			<section id="II-B">
				<title>Support de JavaEE 7 et Spring</title>
				<paragraph>Attention, ces nouveautés ne sont disponibles que pour la version<b>Ultimate</b>. La 13e
                    édition d'IDEA dispose d'un support complet des spécifications JavaEE 7, ce qui implique :
                </paragraph>
				<liste>
					<element>Gestion du framework web Java Server Faces (JSF) 2.2.</element>
					<element>Support du
                        <i>Contexts and Dependency Injection</i>
                        (CDI) 1.1.
                    </element>
					<element>Introduction des nouvelles annotations de JAX-RS 2.0 pour les web-services RESTful.
                    </element>
					<element>Amélioration du client REST intégré.</element>
					<element>Présence des annotations utilisées pour les<i>Web Sockets</i>.
                    </element>
					<element>Intégration des nouvelles versions des serveurs d'applications : Glassfish 4.0, WildFly 8,
                        Tomcat 8, etc.
                    </element>
				</liste>
				<image align="center" alt="[ALT-PASTOUCHE]Le client REST intégré[TITRE-PASTOUCHE]Le client REST intégré" legende="Le client REST intégré" src="./images/rest_client.png"/>
				<paragraph>Pour ce qui est de Spring, le support déjà bien présent dans les précédentes versions est
                    encore amélioré. On y retrouve une meilleure gestion de Spring MVC permettant une navigation aisée
                    entre les controlleurs et les pages HTML associées, la détection des contextes non mappés et annotés
                    avec<i>@Context</i>, ou encore des améliorations sur la performances, la documentation ou les
                    fenêtres spécifiques à Spring (telle que celle de la vue des beans).
                </paragraph>
			</section>
			<section id="II-C">
				<title>Langages alternatifs</title>
				<paragraph>Déjà bien supportés dans la précédente version, le support pour Scala ou Groovy s'améliore
                    encore.
                </paragraph>
				<paragraph>Pour Groovy, différentes fonctionnalités de refactoring ont été mises en place, comme
                    l'introduction de variables ou de constantes. IDEA propose désormais la possibilité de créer des
                    tests avec la librairie<link href="https://code.google.com/p/spock/" title="Spock">Spock</link>.
                    Différents nouveaux inspecteurs ont également été introduits.
                </paragraph>
				<paragraph>Concernant Scala, IDEA offre le support de l'outil<link href="http://www.scala-sbt.org/" title="L'outil SBT">sbt</link>, des
                    options de réorganisation du code ou encore la génération de méthodes de base (telles que
                    <i>hashCode</i>
                    ou<i>equals</i>).
                </paragraph>
				<image align="center" alt="[ALT-PASTOUCHE]Le réarrangeur de code Scala[TITRE-PASTOUCHE]Le réarrangeur de code Scala" legende="Le réarrangeur de code Scala" src="./images/scala_rearranger.png"/>
			</section>
			<section id="II-D">
				<title>Développement web</title>
				<paragraph>Vous l'aurez deviné, les fonctionnalités propres au développement web ne sont disponibles que
                    pour la version<b>Ultimate</b>. Les nouveautés sont entre autres :
                </paragraph>
				<liste>
					<element>Débogeur JavaScript amélioré, en particulier pour Google Chrome et<link href="http://nodejs.org/" title="Node.js">Node.js</link>.
                    </element>
					<element>Amélioration du refactoring CSS.</element>
					<element>Support de la librairie de test<link href="https://github.com/karma-runner/karma" title="Site de la librairie Karma">Karma</link>.
                    </element>
					<element>Support de la version 1.0 de<link href="https://www.dartlang.org/" title="Site de Dart">
                        Dart</link>.
                    </element>
					<element>Début de l'intégration du futur standard des<link href="http://www.w3.org/TR/components-intro/" title="Les composants web selon le W3C">
                        composants web</link>.
                    </element>
					<element>Gestion des langages de
                        <i>templating</i>
                        comme
                        <link href="http://mustache.github.io/" title="Site de Mustache">Mustache</link>
                        ou<link href="http://handlebarsjs.com/" title="Site d'Handlebars">Handlebars</link>.
                    </element>
				</liste>
			</section>
			<section id="II-E">
				<title>Généralités</title>
				<paragraph>Pour ce qui est des gestionnaires de sources, différentes améliorations sont apportées pour
                    Git ou Mercurial. On notera ainsi l'ajout d'une fonctionnalité de "<i>pull-request</i>" pour GitHub.
                </paragraph>
				<paragraph>Pour celles et ceux qui sont encore sur Subversion (SVN), ils seront heureux d'apprendre
                    qu'IDEA est enfin compatible avec Subversion 1.8.
                </paragraph>
				<paragraph>Concernant l'interface graphique, différentes améliorations ont été apportées, les thèmes
                    <i>Darcula</i>
                    et
                    <i>Light</i>
                    étant toujours présents. À noter la présence d'un mode "Présentation" qui ravira celles et ceux qui
                    font des présentations techniques et qui doivent montrer du code.
                </paragraph>
				<paragraph>Dans l'optique d'avoir tout sous la main dans un même outil, IDEA intègre désormais la
                    possibilité d'exécuter des commandes shell localement ou à distance (
                    <i>via</i>
                    une connexion SSH) directement par la vue "Ligne de commandes".
                </paragraph>
				<image align="center" alt="[ALT-PASTOUCHE]Un terminal complètement intégré à IDEA[TITRE-PASTOUCHE]Un terminal complètement intégré à IDEA" legende="Un terminal complètement intégré à IDEA" src="./images/ij13_terminal.png"/>
				<paragraph>Pour améliorer la productivité, la nouvelle fonction de recherche permet d'accéder à
                    pratiquement tout à travers la même fenêtre : classe, méthode, action, paramétrage, etc.
                </paragraph>
				<image align="center" alt="[ALT-PASTOUCHE]IDEA propose des recherches vraiment complètes[TITRE-PASTOUCHE]IDEA propose des recherches vraiment complètes" legende="IDEA propose des recherches vraiment complètes" src="./images/ij13_search.png"/>
				<paragraph>Vous pouvez retrouver toutes ces nouveautés, et bien plus encore sur<link href="http://www.jetbrains.com/idea/whatsnew/index.html" title="Nouveautés d'IDEA">la page
                    dédiée du site de JetBrains</link>.
                </paragraph>
			</section>
		</section>
		<section id="III">
			<title>Ce qui fait la force d'IntelliJ</title>
			<paragraph>On reproche souvent à IntelliJ IDEA d'être payant et d'avoir un prix relativement élevé. Une
                licence unique coûte 179€ si elle est personnelle, 449€ s'il s'agit d'une licence
                d'entreprise. Pour cette dernière, cela représente généralement moins d'une journée de prestation et
                cela risque de lui en faire gagner bien plus.
            </paragraph>
			<paragraph>Ceux qui ont vraiment goûté à cet EDI, comme moi, n'ont plus envie de faire machine arrière et ne
                peuvent plus se passer de l'outil. Voyons dans ce châpitre quelques pistes permettant d'expliquer ceci.
            </paragraph>
			<section id="III-A">
				<title>L'autocomplétion</title>
				<paragraph>L'autocomplétion est une fonctionnalité absolument indispensable à tout bon outil de
                    développement. IDEA non seulement n'échappe pas à la règle, mais propose sans aucun doute la plus
                    puissante dans sa catégorie. Tout d'abord, la complétion "basique" qui consiste à aider le
                    développeur à écrire son code Java fonctionne sans faille. Mais avec IDEA, elle va plus loin. Elle
                    est capable d'aider à compléter le nom des variables ou des classes par exemple. Elle prend
                    également en considération le contexte actuel, ne proposant ainsi que les types qui sont compatibles
                    dans le contexte de la ligne de code courante. IntelliJ IDEA peut ainsi aider le développeur à
                    compléter les requêtes HQL présentes dans des chaînes de caractères dans le code Java.
                </paragraph>
				<image align="center" alt="[ALT-PASTOUCHE]Une autocomplétion vraiment puissante[TITRE-PASTOUCHE]Une autocomplétion vraiment puissante" legende="Une auto-complétion vraiment puissante" src="./images/database_injection.png"/>
				<paragraph>La puissance de l'auto-complétion ne se borne pas au langage Java, puisqu'il supporte sans
                    broncher les langages web - HTML, CSS ou JavaScript - le XML (il est par exemple capable de
                    compléter les noms des classes Java dans les fichiers Spring), Scala, Groovy, etc. En fait, il n'y a
                    pratiquement aucun endroit où IDEA n'est pas à même de proposer une auto-complétion efficace.
                </paragraph>
				<paragraph>Si le sujet vous intéresse, vous pouvez lire l'article
                    <image src="./images/kiten.jpg"/><link href="http://jetbrains.dzone.com/articles/top-20-code-completions-in-intellij-idea" title="20 code completions in IntelliJ IDEA">20 code completions in IntelliJ IDEA
                    </link>
                    (en anglais), ou encore visualiser la vidéo disponible sur la page du site de JetBrains consacrée à
                    <image src="./images/kiten.jpg"/><link href="http://www.jetbrains.com/idea/features/code_completion.html" title="L'auto-complétion selon IDEA">l'auto-complétion</link>.
                </paragraph>
			</section>
			<section id="III-B">
				<title>Analyse et inspections</title>
				<paragraph>IntelliJ IDEA analyse en temps réel et en permanence votre code, à la recherche de problèmes
                    potentiels. À chaque fois qu'il détecte une erreur, IDEA va surligner le problème, et proposera
                    parfois même une solution. De même, lorsqu'IDEA détecte une inconsistence quelconque dans le code,
                    il va proposer, grâce au principe des
                    <b>inspections</b>
                    la meilleure correction possible. Ces inspections sont classées selon leur nature. Nous trouvons
                    ainsi des inspections dédiées au style de codage, aux problèmes de performances ou de sécurité,
                    d'autres dédiées à des langages précis (HTML, XML, Groovy, etc.) ou encore à des frameworks
                    particuliers (Guice, GWT, Less, Maven, etc.).
                </paragraph>
				<paragraph>Il existe plusieurs centaines d'inspections disponibles dans IDEA, difficile de les résumer
                    ici, mais en voici quelques exemples :
                </paragraph>
				<liste>
					<element>Ajout d'un test de non nullité, permettant d'éviter l'apparition de<i>
                        NullPointerException</i>.
                    </element>
					<element>Une condition est toujours fausse (par exemple en testant la nullité d'un objet que l'on a
                        initialisé plus tôt), mettant ainsi en avant du code mort.
                    </element>
					<element>Possibilité de simplifier des expressions booléennes.</element>
					<element>Erreur dans la définition d'une entité Hibernate, par exemple des champs non présents dans
                        la base de données.
                    </element>
					<element>Code inutilisé : imports, variables globales, méthodes privées, propriété d'un fichier
                        <i>.properties</i>
                        inutilisée dans l'application, etc.
                    </element>
					<element>Copie manuelle de tableaux non optimisée.</element>
					<element>Dépendances dupliquées dans les
                        <i>pom.xml</i>
                        de Maven.
                    </element>
					<element>Vérification de la validité des sélecteurs utilisés dans jQuery.</element>
					<element>Détection de problèmes dans la configuration des beans de Spring.</element>
				</liste>
				<image align="center" alt="[ALT-PASTOUCHE]Un exemple de code potentiellement erroné détecté par IDEA[TITRE-PASTOUCHE]Un exemple de code potentiellement erroné détecté par IDEA" legende="Un exemple de code potentiellement erroné détecté par IDEA" src="./images/code_analysis_dead.png"/>
				<paragraph>Il est toujours possible d'exécuter une inspection sur l'ensemble du projet, et parfois même
                    de faire exécuter automatiquement la correction si celle-ci existe. Par exemple, je peux demander à
                    IDEA tous les endroits où j'ai un
                    <i>size() == 0</i>
                    qui pourrait être remplacé par un<i>isEmpty()</i>. IDEA va alors me lister tous les endroits où il
                    trouve<i>uneListe.size() == 0</i>, mais aussi là où il va trouver
                    <i>uneListe.size() > 0</i>
                    et me proposer de le remplacer par un
                    <i>uneListe.isEmpty()</i>
                    (ou
                    <i>!uneListe.isEmpty()</i>
                    dans le deuxième cas). Tout cela en un seul clic !
                </paragraph>
				<image align="center" alt="[ALT-PASTOUCHE]Il est possible d'exécuter toutes les inspections sur l'ensemble du projet[TITRE-PASTOUCHE]Il est possible d'exécuter toutes les inspections sur l'ensemble du projet" legende="Il est possible d'exécuter toutes les inspections sur l'ensemble du projet" src="./images/code_analysis_batch.png"/>
				<paragraph>IDEA va devenir votre ami préféré pour écrire du joli code bien propre...</paragraph>
			</section>
			<section id="III-C">
				<title>Outils de refactoring</title>
				<paragraph>Les fonctionnalités de refactoring proposées par IDEA en font également sa force. Il est
                    ainsi possible de réaliser en un clic - ou une combinaison de touches - ce genre de choses :
                </paragraph>
				<liste>
					<element>Déplacement d'un morceau de code sélectionné vers une nouvelle méthode.</element>
					<element>Extraction d'une partie d'une classe vers une nouvelle, pour alléger la première.</element>
					<element>Inversion de conditions booléennes.</element>
					<element>Suppression sécurisée de composants. Lors de la suppression d'une méthode par exemple, IDEA
                        va s'assurer qu'elle n'est plus utilisée dans le projet, et avertira le développeur le cas
                        échéant.
                    </element>
				</liste>
				<paragraph>Comme souvent, ces fonctionnalités puissantes ne se limitent pas au langage Java, et sont
                    également présentes pour d'autres langages, comme le XML par exemple. On pourra ainsi renommer des
                    noeuds ou des attributs, convertir des noeuds en attributs, etc.
                </paragraph>
				<paragraph>Vous trouverez plus d'informations sur le refactoring sur
                    <image src="./images/kiten.jpg"/><link href="http://www.jetbrains.com/idea/features/refactoring.html" title="Le refactoring par IDEA">cette page</link>.
                </paragraph>
			</section>
			<section id="III-D">
				<title>SSR, ou Structural Search and Replace</title>
				<paragraph>Le
                    <i>Structural Search and Replace</i>
                    (autrement dit la recherche et remplacement structurels) est un outil qui n'est pas toujours facile
                    à manier mais diablement efficace. Il n'est d'ailleurs disponible que dans la version<b>Ultimate</b>
                    .
                </paragraph>
				<paragraph>Il est parfois nécessaire de faire une recherche un peu complexe dans tout le code de son
                    application. Cela peut-être une classe (<i>class A implements B { }</i>), une déclaration (<i>a =
                        b</i>), un commentaire (<i>// TODO A faire</i>) ou une expression (<i>new MaClasse();</i>).
                    Bref, des choses qu'une simple recherche n'est pas capable de trouver. Et bien c'est le rôle du SSR.
                    On ne lui donne pas un texte à chercher, mais plutôt un<i>template</i>.
                </paragraph>
				<paragraph>Prennons un exemple : je souhaite utiliser la librairie
                    <link href="https://github.com/joel-costigliola/assertj-core" title="Site d'AssertJ">AssertJ</link>
                    pour rendre mes assertions plus expressives dans mes tests unitaires. Avec JUnit, mon assertion
                    s'écrit<i>assertEquals(42, unEntier)</i>, alors qu'avec AssertJ, ce sera<i>
                        assertThat(unEntier).isEqualTo(42)</i>. Si je souhaite faire un changement automatique de toutes
                    mes assertions en une seule fois, je vais avoir du mal avec une recherche normale. Avec le SSR, je
                    peux faire cela en un clin d'oeil. Tout d'abord, je saisis le template suivant :
                </paragraph>
				<code langage="java" titre="Template pour le SSR">assertEquals($a$, $b$);</code>
				<paragraph>Vous noterez l'utilisation de variables
                    <i>$a$</i>
                    et<i>$b$</i>. Ensuite, je lui indique par quoi remplacer :
                </paragraph>
				<code langage="java" titre="Template pour le SSR">assertThat($b$).isEqualTo($a$);</code>
				<paragraph>Et le tour est joué ! Pour être sûr de ne pas faire d'erreur, IDEA me montre une
                    prévisualisation des changements avant de les appliquer.
                </paragraph>
				<paragraph>Pour vous aider, il existe un certain nombre de templates prédéfinis, sur lesquels il sera
                    plus prudent de partir pour arriver à ses fins.
                </paragraph>
				<paragraph>Vous pouvez jeter un oeil sur
                    <image src="./images/kiten.jpg"/><link href="http://www.jetbrains.com/idea/documentation/ssr.html" title="La documentation du SSR">la
                        documentation du SSR</link>.
                </paragraph>
			</section>
			<section id="III-E">
				<title>Petits conseils pour bien migrer vers IntelliJ IDEA</title>
				<paragraph>Fin 2012, j'ai acheté la version 12 d'IntelliJ, bien décidé à m'y mettre pour de vrai.
                    J'avais déjà essayé par le passé d'y jeter un œil, mais mes habitudes sur Eclipse ont eu raison
                    de toutes mes tentatives. Mais cette fois-ci fût la bonne, et je ne voudrais jamais avoir à faire
                    machine arrière ! Pour vous aider à franchir le pas, voilà quelques petites astuces.
                </paragraph>
				<paragraph>Tout d'abord, il faut persévérer un peu. C'est vrai qu'il est parfois destabilisant de
                    quitter un outil - en l'occurrence Eclipse - dans lequel on a pris ses habitudes au fil des ans,
                    mais croyez-moi, cette fois c'est pour votre bien !
                </paragraph>
				<paragraph>Premier point : la vue "<i>Workspace</i>" d'Eclipse disparait. IDEA ne gère qu'un seul projet
                    à la fois par fenêtre (il est toutefois possible d'ouvrir autant de fenêtre d'IDEA que voulu).
                    Finalement, ce n'est guère gênant, sauf si on a l'habitude de travailler sur dix projets
                    <i>en même temps</i>
                    (mais là, il y a sans doute un problème, non ?).
                </paragraph>
				<paragraph>Autre chose : les raccourcis clavier. On ne peut pas travailler efficacement sur un outil
                    sans en connaître les raccourcis clavier, du moins les principaux. IDEA propose une option pour
                    faire correspondre autant que possible les raccourcis claviers à ceux d'Eclipse ou de NetBeans. Pour
                    cela, il faut aller dans
                    <i>Settings > Keymap</i>
                    puis choisir
                    <i>Eclipse</i>
                    ou
                    <i>NetBeans</i>
                    dans le sélecteur<i>Keymaps</i>. Toutefois, je vous conseille vivement de laisser les raccourcis par
                    défaut et de les apprendre. Pour vous aider, vous pouvez télécharger et imprimer
                    <link href="http://www.jetbrains.com/idea/docs/IntelliJIDEA_ReferenceCard.pdf" title="Liste des raccourcis clavier pour IDEA">un pense-bête
                    </link>
                    (<link href="http://www.jetbrains.com/idea/docs/IntelliJIDEA_ReferenceCard_Mac.pdf" title="Les raccourcis d'IDEA pour Mac">la version pour Mac</link>) ou pourquoi pas vous<link href="http://www.ptxstore.com/jetbrains/product_info.php?products_id=1638" title="Acheter un T-Shirt IDEA">acheter un t-shirt</link>...
                </paragraph>
				<image align="center" alt="[ALT-PASTOUCHE]Le t-shirt IDEA avec les principaux raccourcis[TITRE-PASTOUCHE]Le t-shirt IDEA avec les principaux raccourcis" legende="Le t-shirt IDEA avec les principaux raccourcis" src="./images/CUJB12S-M10.jpg"/>
				<paragraph>Il existe aussi le raccourci "universel",<i>Ctrl + Shift + A</i>, qui vous permet d'exécuter
                    n'importe quelle action en tapant simplement son nom. Enfin, je vous recommande le plugin "<link href="http://plugins.jetbrains.com/plugin/1003?pr=idea" title="Le plugin Key Promoter">Key
                        Promoter</link>" qui détecte quand vous réalisez une action alors qu'un raccourci clavier
                    existe. Dans pareille situation, le plugin va afficher une popup vous indiquant le raccourci à
                    utiliser pour gagner du temps. C'est très pratique.
                </paragraph>
				<paragraph>Si certaines personnes de votre équipe travaillent toujours sur Eclipse (les pauvres !),
                    alors il faudra peut-être penser à ajouter<link href="http://plugins.jetbrains.com/plugin/6546" title="Le plugin de formattage d'Eclipse">le plugin
                        de formattage d'Eclipse</link>, ce qui vous assurera d'avoir les mêmes conventions que vos
                    camarades. A noter aussi qu'il aussi est possible de demander à IDEA
                    <link href="http://www.jetbrains.com/idea/features/eclipse_java.html" title="Plugin de compatibilité avec Eclipse">de sauvegarder les méta-données du projet au
                        format Eclipse
                    </link>
                    (fichier<i>.classpath</i>) plutôt qu'IDEA (fichier<i>*.iml</i>).
                </paragraph>
				<paragraph>Quoiqu'il en soit, si vous vous sentez perdus, n'hésitez pas à consulter la
                    <link href="http://java.developpez.com/faq/intellijidea" title="FAQ IntelliJ IDEA">F.A.Q.</link>
                    ou
                    <link href="http://www.developpez.net/forums/f1871/java/edi-outils-java/autres-edi/intellij/" title="Forum IDEA">le forum dédié
                    </link>
                    de Developpez.com.
                </paragraph>
				<paragraph>D'autres conseils sur
                    <image src="./images/kiten.jpg"/><link href="http://confluence.jetbrains.com/display/IntelliJIDEA/IntelliJ+IDEA+for+Eclipse+Users" title="Conseils de JetBrains pour migrer vers IDEA">la page dédiée
                    </link>
                    de JetBrains.
                    <link href="http://confluence.jetbrains.com/display/IntelliJIDEA/IntelliJ+IDEA+for+NetBeans+Users" title="Migrer vers IDEA">Une page similaire existe
                    </link>
                    si vous êtes un utilisateur de NetBeans.
                </paragraph>
			</section>
		</section>
		<section id="IV">
			<title>Conclusion</title>
			<paragraph>Sans être une révolution, cette nouvelle version d'IntelliJ IDEA améliore encore un outil
                extrêmement bien fait et ultra-productif.
            </paragraph>
			<paragraph>Si vous êtes développeur d'applications Android, alors il ne faut pas hésiter et se jeter (au
                moins) sur la version<b>Community</b>.
            </paragraph>
			<paragraph>Si vous possédez déjà une version précédente de l'outil, il faudra sans doute fouiller un peu
                dans la liste des nouveautés pour voir si une mise à jour s'avère nécessaire.
            </paragraph>
			<paragraph>Si vous n'avez encore jamais mis les mains sur cet outil, alors il ne faut vraiment pas manquer
                l'occasion d'y jeter un oeil, soit avec la version<b>Community</b>, soit avec la version d'essai de 30
                jours de la version
                <b>Ultimate.</b></paragraph>
		</section>
		<section id="V">
			<title>Remerciements</title>
			<paragraph>Je tiens à remercier JetBrains pour leur aide et leur magnifique outil, ainsi que la communauté
                de Developpez.com. Je remercie également
                <link href="http://www.developpez.net/forums/u69211/mickael-baron/" title="Mickael Baron">Mickael
                    Baron
                </link>
                pour m'avoir proposé l'opportunité d'écrire cet article. Je remercie enfin
                <b>XXX</b>
                pour leur relecture attentive et leurs conseils.
            </paragraph>
		</section>
		<section id="VI">
			<title>Références</title>
			<liste>
				<element>
					<link href="http://www.jetbrains.com/idea/" title="Site officiel d'IDEA">Site officiel d'IDEA</link>
				</element>
				<element>
					<link href="http://www.jetbrains.com/idea/features/index.html" title="Détails des fonctionnalités supportées par IDEA">Détails des fonctionnalités supportées
                        par IDEA
                    </link>
				</element>
				<element>
					<link href="http://www.jetbrains.com/idea/whatsnew/index.html" title="Détails des nouveautés de la version 13">Détails des nouveautés de la version 13
                    </link>
				</element>
				<element>
					<link href="http://java.developpez.com/faq/intellijidea" title="FAQ d'IntelliJ IDEA sur Developpez.com">FAQ d'IntelliJ IDEA sur Developpez.com
                    </link>
				</element>
				<element>
					<link href="http://damienrieu.developpez.com/tutoriel/java/nouveautes-intellij-12/" title="Article de présentation de la v12">Article de présentation de la v12
                    </link>
				</element>
				<element>
					<link href="http://www.developpez.net/forums/f1871/java/edi-outils-java/autres-edi/intellij/" title="Forum IntelliJ de Developpez.com">Forum IntelliJ de Developpez.com
                    </link>
				</element>
			</liste>
			<paragraph>`</paragraph>
		</section>
	</summary>
</document>
